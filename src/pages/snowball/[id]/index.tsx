import { dehydrate, QueryClient } from "@tanstack/react-query";
import { SnowballBig, Text } from "components";
import { Button } from "components/Button";
import Header from "components/Header";
import { useGetSnowball } from "hooks/queries";
import { useSnowball } from "hooks/queries/useSnowball";
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";

import { useRecoilValue, useSetRecoilState } from "recoil";
import { kakaoInit } from "service";
import { getSnowball } from "service/api";

import { modalState, userState } from "stores";

import * as S from "styles/snowball";

const SnowBallPage = ({
  id,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const router = useRouter();

  const user = useRecoilValue(userState);

  const { data, isError, isLoading } = useGetSnowball(id);
  const { hasSnowball } = useSnowball();

  const setModalStatus = useSetRecoilState(modalState);
  const handlePrimaryButtonClick = async () => {
    router.push(`/card/${id}`);
  };

  const handleCreateButtonClick = () => {
    if (hasSnowball) {
      router.push(`/snowball/${user.id}`);
      return;
    }
    router.push(`/create`);
  };

  const handleShareButtonClick = () => {
    const kakao = kakaoInit();
    kakao.Share.sendDefault({
      objectType: "feed",
      content: {
        title: "내 스노우볼 꾸미기",
        description:
          "크리스마스까지 친구들이 나의 스노우볼에 메세지를 남겨드려요",
        imageUrl:
          "https://user-images.githubusercontent.com/74908906/206517360-0341a9db-d26a-449a-9742-2022de667986.png",
        link: {
          mobileWebUrl: `https://mysnowball.me/snowball/${id}`,
          webUrl: `https://mysnowball.me/snowball/${id}`,
        },
      },

      buttons: [
        {
          title: "친구 꾸며주기",
          link: {
            mobileWebUrl: `https://mysnowball.me/snowball/${id}`,
            webUrl: `https://mysnowball.me/snowball/${id}`,
          },
        },
        {
          title: "내꺼 만들기",
          link: {
            mobileWebUrl: "https://mysnowball.me/create",
            webUrl: "https://mysnowball.me/create",
          },
        },
      ],
    });
  };

  useEffect(() => {
    if (!router.isReady) {
      return;
    }

    const order = parseInt(router.query.order as string);

    if (!!order && data && !!data[order]) {
      setModalStatus({
        status: true,
        content: data[order],
      });
    }
  }, [id, data, router, setModalStatus]);

  if (isLoading || isError) {
    return <></>;
  }
  return (
    <>
      <Head>
        <title>My Snowball</title>
        <meta
          name="친구의 스노우볼을 채워주세요. "
          content="Generated by My Snowball"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <S.Layout>
        <S.Title type="24-600">핵스티벌 스노우볼</S.Title>

        <S.SnowballLayout>
          <SnowballBig isClickable open={data.length || 0} id={id} />
        </S.SnowballLayout>
      </S.Layout>

      <S.Footer>
        <Button onClick={handlePrimaryButtonClick}>
          친구 스노우볼 꾸며주기
        </Button>
        <S.Secondary>
          {hasSnowball ? (
            <Button color="green200" onClick={handleCreateButtonClick}>
              내 스노우볼 보기
            </Button>
          ) : (
            <Button color="green200" onClick={handleCreateButtonClick}>
              내 스노우볼 만들기
            </Button>
          )}
          <Button color="green200" onClick={handleShareButtonClick}>
            공유하기
          </Button>
        </S.Secondary>
      </S.Footer>
    </>
  );
};
export default SnowBallPage;

export const getStaticPaths: GetStaticPaths = async () => ({
  paths: [],
  fallback: "blocking",
});

export const getStaticProps: GetStaticProps = async (context) => {
  const queryClient = new QueryClient();
  const id = context.params?.id as string;

  await queryClient.prefetchQuery(["GET_SNOWBALL", id], () => getSnowball(id));

  return {
    props: {
      id,
      dehydratedState: JSON.parse(JSON.stringify(dehydrate(queryClient))),
    },
    revalidate: 1,
  };
};
