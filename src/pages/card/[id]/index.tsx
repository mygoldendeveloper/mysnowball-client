import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Text } from "components";
import { Button } from "components/Button";

import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { ChangeEvent, useEffect, useRef, useState } from "react";
import { useRecoilValue, useSetRecoilState } from "recoil";
import { postSnowballCard } from "service/api";
import { authState, redirectUrlState, userState } from "stores";

import * as S from "styles/card";

interface PostSnowCardReq {
  senderId: number;
  receiverId: number;
  content: string;
}
const CardCreate = ({ id }: InferGetStaticPropsType<typeof getStaticProps>) => {
  const router = useRouter();
  const queryClient = useQueryClient();

  const user = useRecoilValue(userState);
  const auth = useRecoilValue(authState);
  const setRedirect = useSetRecoilState(redirectUrlState);
  const [card, setCard] = useState<string>("");

  const PostPostMutation = useMutation(
    (req: PostSnowCardReq) => postSnowballCard(req),
    {
      onSuccess: (data) => {
        queryClient.invalidateQueries(["GET_SNOWBALL", id]);
        router.push(`/loading/${id}`);
      },
      onError: () => {},
    }
  );

  const handleTextareaChange = (e: ChangeEvent<HTMLTextAreaElement>) => {
    setCard(e.target.value);
  };

  const handlePrimaryButtonClick = () => {
    PostPostMutation.mutate({
      senderId: user.id || 999,
      receiverId: parseInt(id),
      content: card,
    });
  };

  useEffect(() => {
    if (!auth.accessToken) {
      setRedirect("/create");
      router.push("login");
    }
  });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="descriptio0n" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <S.Layout>
        <Text type="24-600">스노우볼에 메세지를 담아주세요.</Text>
        <S.CardInput>
          <S.TextareaWrap>
            <S.Textarea
              maxLength={500}
              onChange={handleTextareaChange}
              disabled={false}
              value={card}
              placeholder="친구 스노우볼에 보낼 카드를 작성해주세요"
            />
          </S.TextareaWrap>
        </S.CardInput>
      </S.Layout>
      <S.Footer>
        <Button onClick={handlePrimaryButtonClick}>스노우볼 선물 보내기</Button>
      </S.Footer>
    </>
  );
};

export default CardCreate;

export const getStaticPaths: GetStaticPaths = async () => ({
  paths: [],
  fallback: "blocking",
});

export const getStaticProps: GetStaticProps = async (context) => {
  // const queryClient = new QueryClient();
  const id = context.params?.id as string;

  return {
    props: {
      id,
      // dehydratedState: dehydrate(queryClient),
    },
  };
};
